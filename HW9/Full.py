# -*- coding: utf-8 -*-
"""
Created on Tue Mar  29 15:34:12 2019

@author: Nate
"""

import numpy as np
import matplotlib.pyplot as plt
import pdb

##############################################################
##############################################################
#Plotting


fig1, axes1 = plt.subplots()

#axes1.scatter(alpha, [3/2*num-2**(3/2)/(np.pi**.5)*num**.5 for num in alpha])
#axes1.scatter(8/(9*np.pi), 3/2*(8/(9*np.pi))-2**(3/2)/(np.pi**.5)*(8/(9*np.pi))**.5)
#axes1.plot(alpha, energy)
#axes1.errorbar(alpha, energy, yerr=std_dev, fmt='o', linestyle = '-')


x_vals = np.linspace(1,10, 50)
x_vals2 = np.linspace(1,10, 19)


b2 = [1.0872633796450852,0.80039579979720954,0.67574782347301665,0.61153353128605381,0.58068371380612938,0.56676187742109718,0.56387208591526405,0.56549427000114882,0.57286366951287571,0.58515351573328778,0.59972879176577376,0.61674915289574750,0.63397598305743197,0.65316290020386403,0.67648524187974857,0.69541669086998603,0.71825354531138530,0.74699995713121226,0.76944078472424704]
b4 = [1.0819767068693265,0.78721691678886829,0.65651764274966562,0.58942548983385201,0.55239569649125597,0.53113765925779977,0.51865736036377408,0.52,0.518,0.5119,0.521,0.523,0.522,0.524,0.527,0.523,0.528,0.53,0.55]
#             1                 1.5                    2                 2.5                3                    3.5                    4          4.5
b8 = [1.0819767068693265,0.78721691678886829,0.65651764274966562,0.58942548983385201,0.55239569649125597,0.53113765925779977,0.51865736036377408,0.51123379270248559,0.50678365490630428,0.50410354167537952,0.50248491165684461,0.50150570292576913,0.50101271425322170,0.50255339044175173,0.50233557520084126,0.50280350977681305,0.50332342503594620,0.50377485743310354,0.50394540199100966]
#             1                 1.5                    2                 2.5                3                    3.5                    4              4.5                     5                  5.5                6                 6.5                    7                                         

axes1.plot(x_vals, [.5+np.e**(-num)/(1-np.e**(-num)) for num in x_vals])
axes1.plot(x_vals2, b2)
axes1.plot(x_vals2, b4)
axes1.plot(x_vals2, b8)



axes1.set_ylabel('Energy')
axes1.set_xlabel(r'$\tau$')
axes1.set_title(r'$<E>_L$ vs $\tau$', va='bottom')
axes1.legend(('Theoretical Solution','2 Bead', '4 Bead', '8 Bead'), loc='upper right')

plt.show()